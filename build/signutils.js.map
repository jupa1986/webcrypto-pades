{"version":3,"sources":["../src/signutils.js"],"names":["serialNumbers","Array","extension","CA","extensions","find","extnID","issuerKeyHash","parsedValue","valueBlock","valueHex","pkijs","getCrypto","subtle","digest","subject","valueBeforeDecode","issuerNameHash","ocspReq","OCSPRequest","requestList","forEach","push","Request","reqCert","CertID","hashAlgorithm","AlgorithmIdentifier","algorithmId","asn1js","OctetString","serialNumber","Integer","tbsRequest","createOCSPReq","pdf","result","data","pdfsign","parsePDF","sigFields","listSigFields","i","sigField","v","get","byteRange","contents","contentBuffer","pvutils","stringToArrayBuffer","asn1","fromBER","cmsContentSimp","ContentInfo","schema","cmsSignedSimp","SignedData","content","certificate","certificates","numeroSerie","bufferToHexCodes","subFilter","filter","name","toUpperCase","date","pattern","undefined","fechaFirma","replace","signedDataBuffer","removeFromArray","stream","bytes","length","verify","signer","trustedCertificates","autenticidad","cadenaConfianza","certificado","ocsp_estado","ocspReqBuffer","toSchema","toBER","statusCode","ocspResBuffer","ocspRespSimpl","OCSPResponse","ocspBasicResp","responseStatus","valueDec","asn1Basic","responseBytes","response","BasicOCSPResponse","tbsResponseData","responses","typeval","certID","subjval","certStatus","idBlock","tagNumber","ocsp_fechaRevocacion","value","toDate","ocsp_fechaActualizacion","thisUpdate","console","log","listSignatures","certificateRaw","keyFromCertificateId","firstProvider","listProviders","listCertificates","createCMSSigned","issuerCertificate","signpdf","firstCertificate","setEngine","CA64","asn2","fromBase64","Certificate","provider","Promise","resolve","then","certStorage","getItem","cert","exportCert","raw","type","keyStorage","keys","keyIDs","keyID","parts","split","key","publicKey","ws","providers","Error","info","isHardware","id","certIDs","isLoggedIn","ok","logout","login","indexes","j","certSimpl","cmsSignedSimpl","version","encapContentInfo","EncapsulatedContentInfo","eContentType","digestAlgorithms","signerInfos","SignerInfo","sid","IssuerAndSerialNumber","issuer","sign","cmsSignedSchema","contentType","_cmsSignedSchema","lenBlock","isIndefiniteForm","block1","block2","cmsSignedBuffer","cmsSignedHex","pdfRaw","signpdfEmpty","getEngine","signature","updateArray","acroForm","xref","root","fields","fetch","sigFieldType","certRaw","sequence","certificados","nombre","CryptoEngine","crypto"],"mappings":"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","file":"signutils.js","sourcesContent":["import * as pkijs from \"pkijs\";\nimport * as asn1js from \"asn1js\";\nimport * as pvutils from \"pvutils\";\nimport * as pdfsign from \"./pdfsign.js\"\n\nlet trustedCertificates = []; // Array of Certificates\n\nconst CA64 = \"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\";\n\nlet asn2 = asn1js.fromBER(pvutils.stringToArrayBuffer(pvutils.fromBase64(CA64)));\nlet CA = new pkijs.Certificate({ schema: asn2.result });\ntrustedCertificates.push(CA);\n\nexport function certificateRaw(provider, certID) {\n    return Promise.resolve()\n        .then(function () {\n            return provider.certStorage.getItem(certID)\n                .then(function (cert) {\n                    return provider.certStorage.exportCert('raw', cert)\n                        .then(function (raw) {\n                            return raw;\n                        });\n                });\n        });\n}\n\nexport function keyFromCertificateId(type, provider, certID) {\n    return Promise.resolve()\n        .then(function () {\n            return provider.keyStorage.keys()\n        })\n        .then(function (keyIDs) {\n            for (var i = 0; i < keyIDs.length; i++) {\n                var keyID = keyIDs[i];\n                var parts = keyID.split(\"-\");\n\n                if (parts[0] === type && parts[2] === certID.split(\"-\")[2]) {\n                    return provider.keyStorage.getItem(keyID);\n                }\n            }\n            return null;\n        })\n        .then(function (key) {\n            if (key || type !== \"public\") {\n                return key;\n            }\n\n            return provider.certStorage.getItem(certID)\n                .then(function (cert) {\n                    return cert.publicKey;\n                });\n        });\n}\n\nexport function firstProvider(ws) {\n    return listProviders(ws).then((providers) => {\n        if (providers.length > 0)\n            return ws.getCrypto(providers[0]);\n        else\n            throw new Error(\"Tokens no encontrados\");\n    });\n}\n\nexport function listProviders(ws) {\n    return ws.info()\n        .then(function (info) {\n            let providers = [];\n            for (let i = 0; i < info.providers.length; i++) {\n                const provider = info.providers[i];\n                if (provider.isHardware)\n                    providers.push(provider.id);\n            }\n            return providers;\n        });\n}\n\nexport function listCertificates(provider) {\n    let certIDs, keyIDs;\n    return Promise.resolve()    // Habilitar en el navegador\n        .then(function () {\n            if (typeof provider.isLoggedIn == \"function\") {\n                return provider.isLoggedIn()\n                    .then(function (ok) {\n                        if (ok)\n                            return provider.logout();\n                    }).then(() => {\n                        return provider.login();\n                    });\n            }\n        })\n        .then(function () {\n            return provider.certStorage.keys()\n        })\n        .then(function (indexes) {\n            certIDs = indexes.filter(function (id) {\n                var parts = id.split(\"-\");\n                return parts[0] === \"x509\";\n            });\n        })\n        .then(function () {\n            return provider.keyStorage.keys()\n        })\n        .then(function (indexes) {\n            keyIDs = indexes.filter(function (id) {\n                var parts = id.split(\"-\");\n                return parts[0] === \"private\";\n            });\n        })\n        .then(function () {\n            var certificates = [];\n            for (var i = 0; i < certIDs.length; i++) {\n                var certID = certIDs[i];\n                for (var j = 0; j < keyIDs.length; j++) {\n                    var keyID = keyIDs[j];\n                    if (keyID.split(\"-\")[2] === certID.split(\"-\")[2]) {\n                        certificates.push(certID);\n                        break;\n                    }\n                }\n            }\n            return certificates;\n        });\n}\n\nexport function createCMSSigned(data, certSimpl, key) {\n\n    let cmsSignedSimpl = new pkijs.SignedData({\n        version: 1,\n        encapContentInfo: new pkijs.EncapsulatedContentInfo({\n            eContentType: \"1.2.840.113549.1.7.1\" // \"data\" content type\n        }),\n        digestAlgorithms: [],\n        signerInfos: [\n            new pkijs.SignerInfo({\n                version: 1,\n                sid: new pkijs.IssuerAndSerialNumber({\n                    issuer: certSimpl.issuer,\n                    serialNumber: certSimpl.serialNumber\n                })\n            })\n        ],\n        certificates: [certSimpl]\n    });\n\n    //TODO: añadir extensiones\n    return cmsSignedSimpl.sign(key, 0, \"sha-256\", data).then(() => { // SHA-256 por defecto\n        var cmsSignedSchema = cmsSignedSimpl.toSchema(true);\n        var cmsContentSimp = new pkijs.ContentInfo({\n            contentType: '1.2.840.113549.1.7.2',\n            content: cmsSignedSchema\n        });\n        var _cmsSignedSchema = cmsContentSimp.toSchema(true);\n        _cmsSignedSchema.lenBlock.isIndefiniteForm = true;\n\n        var block1 = _cmsSignedSchema.valueBlock.value[1];\n        block1.lenBlock.isIndefiniteForm = true;\n\n        var block2 = block1.valueBlock.value[0];\n        block2.lenBlock.isIndefiniteForm = true;\n        var cmsSignedBuffer = _cmsSignedSchema.toBER(false);\n        var cmsSignedHex = pvutils.bufferToHexCodes(cmsSignedBuffer);\n\n        return cmsSignedHex;\n    });\n}\n\nexport function issuerCertificate() {\n    return CA;\n}\n\nexport function signpdf(pdfRaw, key, certificate) {\n    return pdfsign.signpdfEmpty(pdfRaw, pkijs.getEngine()).then(([pdf, byteRange]) => {\n        let data = pdfsign.removeFromArray(pdf, byteRange[1], byteRange[2]);\n        return createCMSSigned(data, certificate, key).then((signature) => { // hex\n            return pdfsign.updateArray(pdf, byteRange[1] + 1, signature);\n        });\n    });\n}\n\nfunction listSigFields(pdf) {\n    const sigFields = [];\n\n    const acroForm = pdf.xref.root.get(\"AcroForm\");\n    if(typeof acroForm === \"undefined\")\n        throw new Error(\"El PDF no tiene firmas!\");\n\n    const fields = acroForm.get(\"Fields\");\n    // TODO\n    // if(window.isRef(fields[0]) === false)\n    //      throw new Error(\"Wrong structure of PDF!\");\n    for (let i = 0; i< fields.length; i++) {\n        const sigField = pdf.xref.fetch(fields[i]);\n        const sigFieldType = sigField.get(\"FT\");\n        if((typeof sigFieldType === \"undefined\") || (sigFieldType.name !== \"Sig\"))\n            // throw new Error(\"Wrong structure of PDF!\");\n            continue; //Ignorar Tx o Btn\n        sigFields.push(sigField);\n    }\n\n    if (sigFields.length == 0)\n        throw new Error(\"El PDF no tiene firmas!\");\n\n    return sigFields;\n}\n\nasync function createOCSPReq(serialNumbers) {\n\n    if (!(serialNumbers instanceof Array))\n        serialNumbers = [serialNumbers];\n\n    let extension = CA.extensions.find((extension) => {\n        return extension.extnID == \"2.5.29.14\";\n    });\n    let issuerKeyHash = extension.parsedValue.valueBlock.valueHex;\n    let issuerNameHash = await pkijs.getCrypto().subtle.digest('SHA-1', CA.subject.valueBeforeDecode);\n\n    const ocspReq = new pkijs.OCSPRequest();\n    let requestList = [];\n\n    serialNumbers.forEach(serialNumber => {\n        requestList.push(new pkijs.Request({\n\t        reqCert: new pkijs.CertID({\n\t\t        hashAlgorithm: new pkijs.AlgorithmIdentifier({\n\t\t\t        algorithmId: \"1.3.14.3.2.26\"\n\t\t        }),\n\t\t        issuerNameHash: new asn1js.OctetString({ valueHex: issuerNameHash }),\n\t\t        issuerKeyHash: new asn1js.OctetString({ valueHex: issuerKeyHash }),\n\t\t        serialNumber: new asn1js.Integer({ valueHex: serialNumber}) // cert.serialNumber.valueBlock.valueHex\n\t        })\n        }));\n    });\n\n    ocspReq.tbsRequest.requestList = requestList;\n    return ocspReq;\n};\n\nexport async function listSignatures(pdf, ocspReq) {\n    const result = {data:[]};\n    pdf = pdfsign.parsePDF(pdf);\n\n    const sigFields = listSigFields(pdf);\n    let serialNumbers = [];\n    for (let i in sigFields) {\n        let data = {};\n        let sigField = sigFields[i];\n        let v = sigField.get(\"V\");\n        let byteRange = v.get(\"ByteRange\");\n        let contents = v.get(\"Contents\");\n\n        let contentBuffer = pvutils.stringToArrayBuffer(contents);\n\n        let asn1 = asn1js.fromBER(contentBuffer);\n        let cmsContentSimp = new pkijs.ContentInfo({ schema: asn1.result });\n        let cmsSignedSimp = new pkijs.SignedData({ schema: cmsContentSimp.content });\n\n        let certificate = cmsSignedSimp.certificates[0];\n\n        data.numeroSerie = pvutils.bufferToHexCodes(certificate.serialNumber.valueBlock.valueHex);\n        serialNumbers.push(certificate.serialNumber.valueBlock.valueHex);\n\n        let subFilter = v.get(\"SubFilter\");\n        let filter = v.get(\"Filter\");\n        data.subFilter = subFilter.name.toUpperCase();\n\n\n        // Fecha de la firma desde el documento PDF\n        // TODO: mejorar\n        var date = v.get(\"M\");\n        var pattern = /D:(\\d{4})(\\d{2})(\\d{2})(\\d{2})(\\d{2})(\\d{2})-0(\\d{1})'00'/;\n\n        if (date != undefined)\n            data.fechaFirma = date.replace(pattern, '$3/$2/$1 $4:$5:$6');\n\n        // Limpiar Campo de la firma\n        let signedDataBuffer = pdfsign.removeFromArray(pdf.stream.bytes,\n                                                        byteRange[1],\n                                                        byteRange[2]);\n        // Limpiar datos\n        signedDataBuffer = pdfsign.removeFromArray(signedDataBuffer,\n                                                    byteRange[1]+byteRange[3],\n                                                    signedDataBuffer.length);\n\n        data.autenticidad = await cmsSignedSimp.verify({signer: 0, data: signedDataBuffer,\n                                                        trustedCertificates: trustedCertificates});\n\n        data.cadenaConfianza = await certificate.verify(trustedCertificates[0]);\n        // data.certificado = pvutils.toBase64(pvutils.arrayBufferToString(certificate.tbs));\n        data.certificado = certificate;\n        data.ocsp_estado = 2; // Desconocido por defecto.\n        result.data.push(data);\n    }\n\n    let ocspReqBuffer = (await createOCSPReq(serialNumbers)).toSchema(true).toBER(false);\n\n    if (ocspReq != undefined && typeof ocspReq == 'function'){\n        try {\n            [statusCode, ocspResBuffer] = await ocspReq(ocspReqBuffer);\n\n            const asn1 = asn1js.fromBER(ocspResBuffer);\n            const ocspRespSimpl = new pkijs.OCSPResponse({ schema: asn1.result });\n            let ocspBasicResp;\n\n            if (ocspRespSimpl.responseStatus.valueBlock.valueDec == 0) { // usar !=\n                if(\"responseBytes\" in ocspRespSimpl) {\n                    const asn1Basic = asn1js.fromBER(ocspRespSimpl.responseBytes.response.\n                                                     valueBlock.valueHex);\n\t\t            ocspBasicResp = new pkijs.BasicOCSPResponse({ schema: asn1Basic.result });\n                    if (serialNumbers.length != ocspBasicResp.tbsResponseData.responses.length) {\n                        // ERROR\n                    }\n                    for(let i = 0; i < ocspBasicResp.tbsResponseData.responses.length; i++)\n\t                {\n                        const typeval = pvutils.bufferToHexCodes(ocspBasicResp.tbsResponseData.responses[i].\n                                                                 certID.serialNumber.valueBlock.valueHex);\n                        let subjval = ocspBasicResp.tbsResponseData.responses[i].certStatus.idBlock.tagNumber;\n\n                        let data = result.data.find((data) => {\n                            return data.numeroSerie == typeval;\n                        });\n                        if (data)\n                            data.ocsp_estado = subjval;\n\n                        if (subjval == 1) {\n                            data.ocsp_fechaRevocacion = ocspBasicResp.tbsResponseData.\n                                responses[i].certStatus.valueBlock.value[0].toDate()\n                        }\n                        data.ocsp_fechaActualizacion = ocspBasicResp.tbsResponseData.responses[i].thisUpdate;\n                    }\n\n                } else {\n                    // ERROR\n                }\n            }\n        } catch(err) {\n            // OCSP no disponible\n            console.log(\"OCSP no disponible:\", err);\n        }\n    }\n\n    return result;\n}\n\nexport function firstCertificate(provider) {\n    let certRaw;\n    let certID;\n\n    let sequence = listCertificates(provider).then((certificados) => {\n        if (certificados.length >0) {\n            // Seleccionar el primer certificado\n            certID = certificados[0];\n            return certificateRaw(provider, certID);\n        } else\n            throw new Error(\"No hay certificados.\");\n    });\n\n    sequence = sequence.then((raw) => {\n        certRaw = raw;\n        return keyFromCertificateId(\"private\", provider, certID);\n    });\n\n    sequence = sequence.then((key) => {\n        if (!key)\n            throw new Error(\"Certificado no tiene llave privada.\");\n\n\n        const certSimpl = asn1js.fromBER(certRaw);\n        const certificate = new pkijs.Certificate({ schema: certSimpl.result });\n\n        return [key, certificate];\n    });\n    return sequence;\n}\n\nexport function setEngine(nombre, provider) {\n    pkijs.setEngine(nombre, provider, new pkijs.CryptoEngine({name: 'local', crypto: provider, subtle: provider.subtle}));\n}\n"]}